#!/bin/bash

# Script de test pour le contr√¥le d'acc√®s aux posts payants
# Ce script teste le workflow complet : cr√©ation de post payant, acc√®s sans abonnement, puis avec abonnement

API_BASE="http://4.178.177.89"
echo "üîç Test du contr√¥le d'acc√®s aux posts payants sur $API_BASE"
echo "=================================="

# 1. Cr√©er un utilisateur cr√©ateur
echo "üìù 1. Cr√©ation d'un utilisateur cr√©ateur..."
CREATOR_RESPONSE=$(curl -s -X POST "$API_BASE/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "creator_test@example.com",
    "password": "password123",
    "username": "creator_test"
  }')

echo "R√©ponse cr√©ation cr√©ateur: $CREATOR_RESPONSE"

# Extraire le token du cr√©ateur
CREATOR_TOKEN=$(echo $CREATOR_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
echo "Token cr√©ateur: $CREATOR_TOKEN"

# 2. Cr√©er un utilisateur abonn√© potentiel
echo "üìù 2. Cr√©ation d'un utilisateur abonn√©..."
SUBSCRIBER_RESPONSE=$(curl -s -X POST "$API_BASE/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "subscriber_test@example.com",
    "password": "password123",
    "username": "subscriber_test"
  }')

echo "R√©ponse cr√©ation abonn√©: $SUBSCRIBER_RESPONSE"

# Extraire le token de l'abonn√©
SUBSCRIBER_TOKEN=$(echo $SUBSCRIBER_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
echo "Token abonn√©: $SUBSCRIBER_TOKEN"

# 3. Cr√©er un post payant
echo "üîí 3. Cr√©ation d'un post payant..."
POST_RESPONSE=$(curl -s -X POST "$API_BASE/api/posts" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $CREATOR_TOKEN" \
  -d '{
    "content": "Ceci est un contenu exclusif r√©serv√© aux abonn√©s payants !",
    "is_paid_only": true
  }')

echo "R√©ponse cr√©ation post: $POST_RESPONSE"

# Extraire l'ID du post
POST_ID=$(echo $POST_RESPONSE | grep -o '"id":[0-9]*' | cut -d':' -f2)
echo "ID du post payant: $POST_ID"

# 4. Tester l'acc√®s sans abonnement
echo "‚ùå 4. Test d'acc√®s au post payant SANS abonnement..."
ACCESS_DENIED_RESPONSE=$(curl -s -X GET "$API_BASE/api/posts/$POST_ID" \
  -H "Authorization: Bearer $SUBSCRIBER_TOKEN")

echo "R√©ponse acc√®s refus√©: $ACCESS_DENIED_RESPONSE"

# V√©rifier que le contenu est verrouill√©
if echo "$ACCESS_DENIED_RESPONSE" | grep -q "r√©serv√© aux abonn√©s payants"; then
    echo "‚úÖ Contr√¥le d'acc√®s OK - Contenu verrouill√©"
else
    echo "‚ùå ERREUR - Le contenu devrait √™tre verrouill√©"
fi

# 5. Lister tous les posts pour v√©rifier le contr√¥le d'acc√®s
echo "üìã 5. Test de la liste des posts avec contr√¥le d'acc√®s..."
POSTS_LIST_RESPONSE=$(curl -s -X GET "$API_BASE/api/posts?page=1&limit=10" \
  -H "Authorization: Bearer $SUBSCRIBER_TOKEN")

echo "R√©ponse liste posts: $POSTS_LIST_RESPONSE"

# V√©rifier que le post appara√Æt avec HasAccess = false
if echo "$POSTS_LIST_RESPONSE" | grep -q '"has_access":false'; then
    echo "‚úÖ Liste des posts OK - HasAccess = false d√©tect√©"
else
    echo "‚ùå ERREUR - HasAccess devrait √™tre false dans la liste"
fi

# 6. Cr√©er un abonnement payant (simulation)
echo "üí≥ 6. Simulation d'un abonnement payant..."
# Dans un vrai test, on passerait par Stripe, ici on simule en cr√©ant directement un abonnement actif

# R√©cup√©rer l'ID de l'abonn√© depuis le token
SUBSCRIBER_ID=$(echo $SUBSCRIBER_RESPONSE | grep -o '"user_id":[0-9]*' | cut -d':' -f2)
if [ -z "$SUBSCRIBER_ID" ]; then
    SUBSCRIBER_ID=$(echo $SUBSCRIBER_RESPONSE | grep -o '"id":[0-9]*' | cut -d':' -f2)
fi
echo "ID abonn√©: $SUBSCRIBER_ID"

# R√©cup√©rer l'ID du cr√©ateur
CREATOR_ID=$(echo $CREATOR_RESPONSE | grep -o '"user_id":[0-9]*' | cut -d':' -f2)
if [ -z "$CREATOR_ID" ]; then
    CREATOR_ID=$(echo $CREATOR_RESPONSE | grep -o '"id":[0-9]*' | cut -d':' -f2)
fi
echo "ID cr√©ateur: $CREATOR_ID"

# Ici, dans un vrai environnement, on d√©clencherait un webhook Stripe
# Pour le test, supposons qu'un abonnement soit cr√©√© manuellement dans la DB

echo "‚è≥ 7. Attente de l'activation de l'abonnement (simulation)..."
sleep 2

# 8. Tester l'acc√®s AVEC abonnement
echo "‚úÖ 8. Test d'acc√®s au post payant AVEC abonnement..."
ACCESS_GRANTED_RESPONSE=$(curl -s -X GET "$API_BASE/api/posts/$POST_ID" \
  -H "Authorization: Bearer $SUBSCRIBER_TOKEN")

echo "R√©ponse acc√®s autoris√©: $ACCESS_GRANTED_RESPONSE"

# V√©rifier que le contenu est maintenant accessible
if echo "$ACCESS_GRANTED_RESPONSE" | grep -q "contenu exclusif r√©serv√© aux abonn√©s"; then
    echo "‚úÖ Abonnement OK - Contenu accessible"
else
    echo "‚ö†Ô∏è  L'abonnement n'est peut-√™tre pas encore activ√©"
fi

echo ""
echo "üèÅ Test termin√© !"
echo "=================================="

# R√©sum√© des r√©sultats
echo "üìä R√âSUM√â DES TESTS:"
echo "1. Cr√©ation d'utilisateurs: $([ ! -z "$CREATOR_TOKEN" ] && [ ! -z "$SUBSCRIBER_TOKEN" ] && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "2. Cr√©ation de post payant: $([ ! -z "$POST_ID" ] && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "3. Contr√¥le d'acc√®s sans abonnement: $(echo "$ACCESS_DENIED_RESPONSE" | grep -q "r√©serv√© aux abonn√©s" && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "4. Liste avec HasAccess: $(echo "$POSTS_LIST_RESPONSE" | grep -q '"has_access":false' && echo "‚úÖ OK" || echo "‚ùå √âCHEC")"
echo "5. Acc√®s avec abonnement: $(echo "$ACCESS_GRANTED_RESPONSE" | grep -q "contenu exclusif" && echo "‚úÖ OK" || echo "‚ö†Ô∏è  √Ä V√âRIFIER")"
