definitions:
  auth.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterInput:
    properties:
      email:
        type: string
      firstname:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      username:
        type: string
    required:
    - email
    - firstname
    - name
    - password
    - username
    type: object
  auth.TokenResponse:
    properties:
      token:
        type: string
    type: object
  comment.CreateCommentRequest:
    properties:
      post_id:
        type: integer
      text:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - post_id
    - text
    type: object
  comment.UpdateCommentRequest:
    properties:
      text:
        maxLength: 1000
        minLength: 1
        type: string
    required:
    - text
    type: object
  media.Media:
    properties:
      fileName:
        description: Nom original du fichier
        type: string
      fileSize:
        description: Taille du fichier en octets
        type: integer
      id:
        type: integer
      mediaType:
        type: string
      mediaURL:
        type: string
      metadata:
        description: Métadonnées au format JSON
        type: string
      postID:
        type: integer
      thumbnailURL:
        description: URL de la miniature pour les images et vidéos
        type: string
    type: object
  message.CreateMessageInput:
    properties:
      content:
        type: string
      receiver_id:
        type: integer
    required:
    - content
    - receiver_id
    type: object
  message.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      receiverID:
        type: integer
      senderID:
        type: integer
      status:
        $ref: '#/definitions/message.MessageStatus'
      updatedAt:
        type: string
    type: object
  message.MessageDTO:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      receiver:
        $ref: '#/definitions/message.UserInfo'
      sender:
        allOf:
        - $ref: '#/definitions/message.UserInfo'
        description: Infos utilisateur enrichies
      status:
        $ref: '#/definitions/message.MessageStatus'
    type: object
  message.MessagePreviewDTO:
    properties:
      conversation_id:
        description: 'clé virtuelle: "user1-user2"'
        type: string
      last_message:
        type: string
      other_user:
        allOf:
        - $ref: '#/definitions/message.UserInfo'
        description: celui avec qui je parle
      timestamp:
        type: string
      unread_count:
        type: integer
    type: object
  message.MessageStatus:
    enum:
    - UNREAD
    - READ
    - ARCHIVED
    - DELETED
    type: string
    x-enum-varnames:
    - StatusUnread
    - StatusRead
    - StatusArchived
    - StatusDeleted
  message.UpdateMessageInput:
    properties:
      content:
        type: string
    required:
    - content
    type: object
  message.UserInfo:
    properties:
      avatar_url:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  post.CreatorInfo:
    properties:
      avatar_url:
        type: string
      full_name:
        type: string
      id:
        type: integer
      username:
        type: string
    type: object
  post.PostDTO:
    properties:
      comment_count:
        type: integer
      content:
        type: string
      created_at:
        type: string
      creator:
        allOf:
        - $ref: '#/definitions/post.CreatorInfo'
        description: Informations du créateur
      creator_id:
        type: integer
      document_type:
        type: string
      id:
        type: integer
      like_count:
        description: Statistiques
        type: integer
      media_urls:
        items:
          type: string
        type: array
      updated_at:
        type: string
      user_has_liked:
        type: boolean
      visibility:
        type: string
    type: object
  post.UpdatePostInput:
    properties:
      content:
        type: string
      document_type:
        type: string
      visibility:
        allOf:
        - $ref: '#/definitions/post.Visibility'
        enum:
        - public
        - private
    type: object
  post.Visibility:
    enum:
    - public
    - private
    type: string
    x-enum-varnames:
    - Public
    - Private
  subscription.Subscription:
    properties:
      creatorID:
        type: integer
      endDate:
        type: string
      id:
        type: integer
      isActive:
        type: boolean
      startDate:
        type: string
      subscriberID:
        type: integer
      type:
        description: '"paid" ou "free"'
        type: string
    type: object
  subscription.SubscriptionInput:
    properties:
      creator_id:
        type: integer
      type:
        enum:
        - paid
        - free
        type: string
    required:
    - creator_id
    - type
    type: object
  user.ProfileDTO:
    properties:
      avatar_url:
        example: https://cdn.thinkshare/avatar.jpg
        type: string
      bio:
        example: Étudiant à l’EEMI et dev fullstack
        type: string
      full_name:
        example: Haithem Hammami
        type: string
      id:
        example: 1
        type: integer
    type: object
  user.UpdateUserInput:
    properties:
      avatar_url:
        example: https://cdn.thinkshare/avatar.jpg
        type: string
      bio:
        example: Développeur Go, passionné par l'éducation
        type: string
      full_name:
        example: Haithem Hammami
        type: string
    type: object
  user.User:
    properties:
      avatar_url:
        example: https://cdn.thinkshare/avatar.jpg
        type: string
      bio:
        example: Étudiant à l’EEMI et dev fullstack
        type: string
      created_at:
        example: "2024-01-01T15:04:05Z"
        type: string
      email:
        example: haithem@example.com
        type: string
      first_name:
        example: Haithem
        type: string
      full_name:
        example: Haithem Hammami
        type: string
      id:
        example: 1
        type: integer
      messages_recv:
        items:
          $ref: '#/definitions/message.Message'
        type: array
      messages_sent:
        items:
          $ref: '#/definitions/message.Message'
        type: array
      name:
        example: Hammami
        type: string
      posts:
        items:
          $ref: '#/definitions/user.UserPost'
        type: array
      role:
        example: user
        type: string
      subscriptions:
        items:
          $ref: '#/definitions/subscription.Subscription'
        type: array
      username:
        example: haithemdev
        type: string
    type: object
  user.UserPost:
    properties:
      creatorID:
        type: integer
      id:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/comments:
    post:
      consumes:
      - application/json
      description: Create a new comment on a post
      parameters:
      - description: Comment content and post ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/comment.CreateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Comment created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create comment
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new comment
      tags:
      - comments
  /api/comments/{id}:
    delete:
      description: Delete a comment (only the owner can delete)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid comment ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: You are not allowed to delete this comment
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete comment
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a comment
      tags:
      - comments
    put:
      consumes:
      - application/json
      description: Update the content of a comment (only the owner can update)
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated comment content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/comment.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid comment ID or data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: You are not allowed to edit this comment
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update comment
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a comment
      tags:
      - comments
  /api/comments/{postID}:
    get:
      description: Retrieve all comments for a specific post (paginated)
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Number of comments per page (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of comments and pagination info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve comments
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get comments for a post
      tags:
      - comments
  /api/followers:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
      security:
      - BearerAuth: []
      summary: Récupère tous les followers de l'utilisateur connecté
      tags:
      - Subscription
  /api/followers/{id}:
    get:
      parameters:
      - description: ID du créateur
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                additionalProperties: true
                type: object
              type: array
            type: object
      security:
      - BearerAuth: []
      summary: Récupère tous les followers d’un utilisateur par son ID, avec tag paid/free
      tags:
      - Subscription
  /api/likes/posts/{postID}:
    get:
      description: Get the total number of likes and whether the authenticated user
        has liked the post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      responses:
        "200":
          description: Like stats
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get like stats for a post
      tags:
      - likes
    post:
      description: Add or remove a like on a post by the authenticated user
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      responses:
        "200":
          description: Like toggled, returns stats
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Toggle like on a post
      tags:
      - likes
  /api/media/{id}:
    delete:
      description: Delete a media file by its ID (only the owner or admin can delete)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Media deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid media ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Media not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a media file
      tags:
      - media
    get:
      description: Retrieve a media file and its metadata by its ID
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.Media'
        "400":
          description: Invalid media ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Media not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get media by ID
      tags:
      - media
  /api/media/{id}/metadata:
    put:
      consumes:
      - application/json
      description: Update the metadata of a media file (only the owner or admin can
        update)
      parameters:
      - description: Media ID
        in: path
        name: id
        required: true
        type: integer
      - description: Metadata update payload
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Metadata updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update media metadata
      tags:
      - media
  /api/media/cleanup:
    post:
      description: Delete all media files not referenced in the database (admin only)
      produces:
      - application/json
      responses:
        "200":
          description: Cleanup result
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cleanup orphaned media files
      tags:
      - media
  /api/media/post/{postID}:
    get:
      description: Retrieve all media files associated with a specific post
      parameters:
      - description: Post ID
        in: path
        name: postID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of media for the post
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all media for a post
      tags:
      - media
  /api/messages:
    post:
      consumes:
      - application/json
      description: Send a private message to another user
      parameters:
      - description: Message content and receiver ID
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/message.CreateMessageInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/message.MessageDTO'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Send a private message
      tags:
      - messages
  /api/messages/{id}:
    delete:
      description: Delete a message (only the sender can delete)
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Message deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid message ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a message
      tags:
      - messages
    put:
      consumes:
      - application/json
      description: Update the content of a message (only the sender can update)
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated content
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/message.UpdateMessageInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/message.MessageDTO'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a message
      tags:
      - messages
  /api/messages/{otherUserID}:
    get:
      description: Get all messages exchanged with a specific user
      parameters:
      - description: Other user ID
        in: path
        name: otherUserID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/message.MessageDTO'
            type: array
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get conversation with a user
      tags:
      - messages
  /api/messages/{senderID}/read:
    patch:
      description: Mark all messages from a sender as read for the authenticated user
      parameters:
      - description: Sender user ID
        in: path
        name: senderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Messages marked as read
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid sender ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mark messages as read
      tags:
      - messages
  /api/messages/conversations:
    get:
      description: Get a preview of all conversations (last message, user info, unread
        count)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/message.MessagePreviewDTO'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all conversations
      tags:
      - messages
  /api/posts:
    get:
      description: Retrieve all posts with optional infinite scroll (after/limit)
      parameters:
      - description: Last post ID already loaded (for infinite scroll)
        in: query
        name: after
        type: integer
      - description: Number of posts to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts and pagination info
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all posts (infinite scroll)
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: Create a new post with text and optional media (images, video,
        or documents)
      parameters:
      - description: Post content
        in: formData
        name: content
        required: true
        type: string
      - description: Post visibility (public or private)
        in: formData
        name: visibility
        required: true
        type: string
      - description: Document type (optional)
        in: formData
        name: document_type
        type: string
      - description: Images (max 10, only if no video/documents)
        in: formData
        name: images
        type: file
      - description: Video (only if no images/documents)
        in: formData
        name: video
        type: file
      - description: Documents (max 5, only if no images/video)
        in: formData
        name: documents
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.PostDTO'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new post
      tags:
      - posts
  /api/posts/{id}:
    delete:
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Retrieve a post and its details by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostDTO'
        "400":
          description: Invalid post ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update the content, visibility, or document type of a post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Fields to update
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/post.UpdatePostInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostDTO'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Post not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a post
      tags:
      - posts
  /api/posts/media/stats:
    get:
      description: Retrieve statistics and recommendations about uploaded media
      produces:
      - application/json
      responses:
        "200":
          description: Media statistics and recommendations
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get media statistics
      tags:
      - posts
  /api/posts/user/{id}:
    get:
      description: Retrieve all posts created by a specific user (with infinite scroll)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Last post ID already loaded (for infinite scroll)
        in: query
        name: after
        type: integer
      - description: Number of posts to return (default 20)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of posts and pagination info
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get posts by user
      tags:
      - posts
  /api/profile:
    get:
      description: Returns the profile information of the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ProfileDTO'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get current user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update profile fields (full name, bio, avatar)
      parameters:
      - description: Updatable profile fields
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update current user profile
      tags:
      - user
  /api/subscribe:
    post:
      consumes:
      - application/json
      parameters:
      - description: Données d’abonnement
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/subscription.SubscriptionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.Subscription'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: S’abonner à un créateur (payant ou gratuit)
      tags:
      - Subscription
  /api/subscriptions:
    get:
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                additionalProperties: true
                type: object
              type: array
            type: object
      security:
      - BearerAuth: []
      summary: Récupère la liste des utilisateurs suivis par l'utilisateur connecté
        (avec tag paid/free)
      tags:
      - Subscription
  /api/unsubscribe:
    post:
      parameters:
      - description: ID du créateur
        in: query
        name: creator_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Se désabonner d’un créateur
      tags:
      - Subscription
  /api/users/{id}/profile:
    get:
      description: Returns the public profile of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.ProfileDTO'
        "400":
          description: Invalid user ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get public user profile
      tags:
      - user
  /auth/{provider}:
    get:
      parameters:
      - description: google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "302":
          description: Redirection vers Google
          schema:
            type: string
      summary: Début de l'authentification Google OAuth
      tags:
      - Auth
  /auth/{provider}/callback:
    get:
      parameters:
      - description: google
        in: path
        name: provider
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
      summary: Callback OAuth Google
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Identifiants de connexion
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.TokenResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Connexion utilisateur (login email/password)
      tags:
      - Auth
  /logout:
    get:
      produces:
      - application/json
      responses:
        "302":
          description: Redirect vers /
          schema:
            type: string
      summary: Déconnexion utilisateur
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Informations d'inscription
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Créer un compte avec name, firstname, username, email, password
      tags:
      - Auth
swagger: "2.0"
