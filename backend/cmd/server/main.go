package main

import (
	"log"
	"os"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"

	"github.com/khalidaBerki/thinkshare/backend/internal/auth"
	"github.com/khalidaBerki/thinkshare/backend/internal/user"
)

func main() {
	// ‚úÖ En dev, charger le fichier .env localement
	if os.Getenv("GIN_MODE") != "release" {
		err := godotenv.Load("../../.env") // Chemin relatif au fichier .env
		if err != nil {
			log.Println("‚ö†Ô∏è  .env non trouv√©, on suppose que les variables sont d√©j√† dans l'environnement")
		}
	}

	// ‚úÖ Configurer le mode Gin (release = prod)
	mode := os.Getenv("GIN_MODE")
	if mode == "release" {
		gin.SetMode(gin.ReleaseMode)
	} else {
		gin.SetMode(gin.DebugMode)
	}

	r := gin.Default()

	// ‚úÖ Routes publiques (√† activer quand tu auras login/register)
	// public := r.Group("/api")
	// {
	//     public.POST("/login", auth.LoginHandler)
	//     public.POST("/register", auth.RegisterHandler)
	// }

	// üîê Routes priv√©es (prot√©g√©es par v√©rification de session JWT)
	private := r.Group("/api", auth.AuthMiddleware())
	{
		private.GET("/profile", user.GetProfileHandler)
		private.PUT("/profile", user.UpdateProfileHandler)
	}

	// ‚úÖ D√©terminer le port dynamiquement
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // par d√©faut en local
	}

	log.Printf("‚úÖ Serveur lanc√© sur le port : %s", port)
	if err := r.Run(":" + port); err != nil {
		log.Fatalf("‚ùå Erreur au d√©marrage du serveur : %v", err)
	}
}
